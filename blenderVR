#!/usr/bin/env python3
# -*- encoding: utf-8 -*-
# file: blenderVR

## Copyright (C) LIMSI-CNRS (2014)
##
## contributor(s) : Jorge Gascon, Damien Touraine, David Poirier-Quinot,
## Laurent Pointal, Julian Adenauer,
##
## This software is a computer program whose purpose is to distribute
## blender to render on Virtual Reality device systems.
##
## This software is governed by the CeCILL  license under French law and
## abiding by the rules of distribution of free software.  You can  use,
## modify and/ or redistribute the software under the terms of the CeCILL
## license as circulated by CEA, CNRS and INRIA at the following URL
## "http://www.cecill.info".
##
## As a counterpart to the access to the source code and  rights to copy,
## modify and redistribute granted by the license, users are provided only
## with a limited warranty  and the software's author,  the holder of the
## economic rights,  and the successive licensors  have only  limited
## liability.
##
## In this respect, the user's attention is drawn to the risks associated
## with loading,  using,  modifying and/or developing or reproducing the
## software by the user in light of its specific status of free software,
## that may mean  that it is complicated to manipulate,  and  that  also
## therefore means  that it is reserved for developers  and  experienced
## professionals having in-depth computer knowledge. Users are therefore
## encouraged to load and test the software's suitability as regards their
## requirements in conditions enabling the security of their systems and/or
## data to be ensured and,  more generally, to use and operate it in the
## same conditions as regards security.
##
## The fact that you are presently reading this means that you have had
## knowledge of the CeCILL license and that you accept its terms.
##

"""
Daemon
******

This script runs in the clients and is responsible for spawning the
Blender Player.

Using the blenderVR root (relative to this script dir or given via
command line), it setup the Python PATH to make blendervr package (
from modules subdir) available,

*Important*: it store the ``blenderVR_root`` variable inside builtins, so that
all scripts can access it.

Then it import blenderVR module from utils directory and start its
main() function.
"""
import sys
import os
import builtins

if sys.platform.startswith('win'): # Windows
    path = os.path.join(os.environ['APPDATA'])
elif sys.platform == 'darwin': # MacOSX
    path = os.path.join(os.path.expanduser('~'), 'Library',
                        'Application Support')
else: # Unix ...
    path = os.path.join(os.path.expanduser('~'), '.config')
path = os.path.join(path, 'blender')

if not os.path.isdir(path): os.makedirs(path)

profile_file = os.path.join(path, 'vr', 'profile_1.0.pickle')

builtins.blenderVR_profilePath = os.path.join(path, 'vr', 'modules')
if not os.path.isdir(blenderVR_profilePath):
    os.makedirs(blenderVR_profilePath)


# Prepare command-line arguments parsing, then parse it.
import argparse
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--version", dest="d_version",
                    help="Current version of blender player",
                    action="store_true", default=False)
parser.add_argument("--blenderVR-root", dest="blenderVR_root",
                    help="Modify the blenderVR root")
parser.add_argument("--display-console", dest="dis_console",
                    help="Display current configuration of the console",
                    action="store_true", default=False)
parser.add_argument("--delete-console", dest="del_console",
                    help="Delete current configuration of the console",
                    action="store_true", default=False)
parser.add_argument("-d", "--debug", dest="debug",
                    help="Debug blenderVR application",
                    action="store_true", default=False)
parser.add_argument("-c", "--controller", dest="controller",
                    help="Start the controller",
                    action="store_true", default=False)
parser.add_argument("-u", "--user-interface", dest="ui",
                    help="Open the user interface",
                    action="store_true", default=False)
parser.add_argument("-a", "--all", dest="all",
                    help="Start the controller and Open the user interface",
                    action="store_true", default=False)
parser.add_argument("-p", "--port", dest="port",
                    help="Set the port of the controller")

environments = parser.parse_args(sys.argv[1:])


def checkRoot(path):
    """Check if a given path is valid as blenderVR root.

    This is done by searching a 'modules' subdirectory within that path
    (this modules which contains the blendervr Python package)

    :param path: path to test
    :type path: str
    :return: boolean indicator that path is valid
    :rtype: bool
    """
    return (path and os.path.isdir(os.path.join(path, 'modules', 'blendervr')))


def getRootPath(environment):
    root = os.path.dirname(os.path.realpath(__file__))
    if checkRoot(root):
        return root
    if environment is not None:
        if checkRoot(environment):
            return environment
        print('Invalid blenderVR root path (' + environment + '): it must contain the ' + os.path.join('modules', 'blendervr') + ' folder !')
        sys.exit()
    try:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        if 'root' in configuration:
            return configuration['root']
    except:
        pass
    return None


root = getRootPath(environments.blenderVR_root)

if checkRoot(root):
    moduleRoot = os.path.join(root, 'modules')
else:
    print('Cannot find blenderVR root !')
    print('Try adding --blenderVR-root option to blenderVR (' + sys.argv[0]
            + ' --blenderVR-root="path") !')
    sys.exit()

try:
    if environments.dis_console:
        import pickle
        with open(profile_file, 'rb') as node:
            configuration = pickle.load(node)
        import pprint
        print("Configuration:")
        pprint.pprint(configuration)
        sys.exit()
    if environments.del_console:
        os.remove(profile_file)
        sys.exit()
except FileNotFoundError:
    print('Invalid profile file:', profile_file)
    sys.exit()

if environments.all:
    environments.ui         = True
    environments.controller = True
    environments.all        = False

# Start main() function from utils/blenderVR.py module.
try:
    sys.path.append(moduleRoot)
    if environments.d_version:
        try:
            import blendervr
            print('Current version:', blendervr.version)
        except:
            pass
        sys.exit()

    environment = os.environ
    environment['PYTHONPATH'] = moduleRoot
    import subprocess
    if environments.controller:
        options     = [profile_file]
        if environments.debug:
            stdout_stream = None
            options.append('debug')
        else:
            stdout_stream = subprocess.PIPE
        process = subprocess.Popen([sys.executable, os.path.join(root, 'utils', 'console', 'controller.py')] + options, env = environment, shell = False, stdout = stdout_stream)
        if not environments.debug:
            port = process.stdout.readline().decode().strip()
            print('port:', port)
        else:
            process.wait()
            sys.exit()
    if environments.ui and environments.port:
        options = [environments.port]
        if environments.debug:
            options.append('debug')
        process = subprocess.Popen([sys.executable, os.path.join(root, 'utils', 'console', 'ui.py')] + options, env = environment)
        process.wait()

except SystemExit:
    pass

except:
    import traceback
    traceback.print_exc()
    sys.exit()
